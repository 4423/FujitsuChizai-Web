@model FujitsuChizai.Controllers.MapViewModel

@{
    ViewBag.Title = Model.Map.Floor + "階の照明・場所情報";
}

<h2>@ViewBag.Title</h2>

<!--外部CSSファイル(MapStyleSheet.css)の読み込み方不明-->
<div>
    <input type="button" value="縮小" onClick="zoomOut()" />
    <input type="button" value="拡大" onClick="zoomIn()" />
    <input type="button" value="登録" onClick="registerPath()" />
</div>
<div style="overflow: scroll; width:1000px; height:800px; border: solid 1px lightgray;">
    <div id="canvas" style="transform: scale(0.5);">
        <img src="~/Resources/Map/@Model.Map.MapImageFilePath" style="position:absolute;">
        <div id="path_canvas" style="position:absolute;">
            <svg width="@Model.Map.Width" height="@Model.Map.Height">
                @for (int i = 0; i < Model.Edges.Count; i++)
                {
                    // DBへの一切のアクセスがViewからは実行できないっぽいので、はじめにController側で文字列生成しておく
                    // それをEdgesと同時に読みだすためにfor文を使用した
                    <path d="@Html.DisplayFor(modelItem => Model.PathData[i])"
                          id1="@Html.DisplayFor(modelItem => Model.Edges[i].PlaceMarkId1)"
                          id2="@Html.DisplayFor(modelItem => Model.Edges[i].PlaceMarkId2)"
                          cost="@Html.DisplayFor(modelItem => Model.Edges[i].Cost)"
                          stroke="gray" stroke-width="5" />
                }
            </svg>
        </div>

        <div id="circle_canvas" style="position:absolute;">
            <svg width="@Model.Map.Width" height="@Model.Map.Height">
                @foreach (var item in Model.PlaceMarks)
                {
                    <circle cx="@Html.DisplayFor(modelItem => item.X)"
                            cy="@Html.DisplayFor(modelItem => item.Y)"
                            r="20"
                            fill="lightgreen"
                            id="@Html.DisplayFor(modelItem => item.Id)"
                            lightId="@Html.DisplayFor(modelItem => item.LightId)"
                            floor="@Html.DisplayFor(modelItem => item.Floor)"
                            type="@Html.DisplayFor(modelItem => item.Type)"
                            name="@Html.DisplayFor(modelItem => item.Name)" />
                }
            </svg>
        </div>
    </div>
</div>

<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script type="text/javascript">
    var pathSvg;
    var circleSvg;

    window.onload = function () {
        pathSvg = d3.select("#path_canvas svg");
        circleSvg = d3.select("#circle_canvas svg");

        // イベントハンドラ設定
        d3.select("#circle_canvas").selectAll('circle')
            .on("click", function (d, i) { mouseclick($(this)); });
    }

    var isConnect = false;
    var startNode;
    function mouseclick(node) {
        if (!isConnect) {
            isConnect = true;
            startNode = node;
        }
        else {
            if (startNode.attr('id') == node.attr('id')) {
                return; // 自身同士は接続させない
            }
            isConnect = false;
            drawConnection(startNode, node);
        }
    }

    // 属性から[x,y]配列を取得
    function getPoint(obj) {
        return [obj.attr('cx'), obj.attr('cy')];
    }

    // 2点間の距離を1/10した値(切り上げ)
    function getCost(pos) {
        return Math.ceil(0.1 * Math.sqrt(
            Math.pow(Math.abs(pos[0][0] - pos[1][0]), 2) //x^2
            + Math.pow(Math.abs(pos[0][1] - pos[1][1]), 2) //y^2
        ));
    }

    // 照明同士かどうか
    function isLightEach(obj1, obj2) {
        return obj1.attr('type') == "Light" && obj2.attr('type') == "Light";
    }

    // 線を描画
    function drawConnection(node1, node2) {
        var line = d3.svg.line()
            .x(function (d) { return d[0]; })
            .y(function (d) { return d[1]; });
        var pos = [getPoint(node1), getPoint(node2)];
        pathSvg.append("path")
            .attr({
                'd': line(pos),
                'stroke': 'gray',
                'stroke-width': 5,
                'id1': node1.attr('id'),
                'id2': node2.attr('id'),
                // 照明-場所などのコストは0
                'cost': isLightEach(node1, node2) ? getCost(pos) : 0
            });
    }
</script>
<script type="text/javascript">
    function registerPath() {
        $('path').each(function (i, e) {
            post($(e).attr('id1'), $(e).attr('id2'), $(e).attr('cost'));
        });
    }

    function post(id1, id2, cost) {
        jQuery.ajax({
            url: '@Request.Url.AbsoluteUri.Replace(Request.RawUrl, "")/api/edges',
            type: 'POST',
            dataType: 'json',
            data: { placeMarkId1: id1, placeMarkId2: id2, cost: cost },
            timeout: 10000,
            success: function (data) {
                alert("ok");
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert("error");
            }
        });
    }
</script>
<script type="text/javascript">
    var zoomRatio = 0.5;

    function setZoomRatio() {
        $('#canvas').css('transform', 'scale(' + zoomRatio + ')');
    }

    function zoomOut() {
        zoomRatio -= 0.1;
        setZoomRatio();
    }
    function zoomIn() {
        zoomRatio += 0.1;
        setZoomRatio();
    }
</script>