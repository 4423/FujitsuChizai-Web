@model FujitsuChizai.Controllers.MapViewModel
@using FujitsuChizai.Models.Entities

@section Header
{ 
    @Scripts.Render("~/Scripts/sweetAlert/sweetalert.min.js")
    @Styles.Render("~/Scripts/sweetAlert/sweetalert.css")

    <link href="http://fonts.googleapis.com/earlyaccess/notosansjp.css" rel="stylesheet" >
    <link href="https://fonts.googleapis.com/css?family=Titillium+Web" rel="stylesheet">
    @Styles.Render("~/Content/Map/MapStyleSheet.css")
    @Scripts.Render("~/Content/Map/map.js")
    @Scripts.Render("~/Content/Map/zoom.js")
    @Scripts.Render("~/Content/Map/connect.js")
    @Scripts.Render("~/Content/Map/controls.js")
    @Scripts.Render("~/Content/Map/placemark.js")
    @Scripts.Render("~/Content/Map/edge.js")
}

@{
    ViewBag.Title = Model.Map.Floor + "階の照明・場所情報";

    var typeColor = new Dictionary<PlaceMarkType, string>();
    typeColor.Add(PlaceMarkType.Light, "orange");
    typeColor.Add(PlaceMarkType.Place, "lightgreen");
    typeColor.Add(PlaceMarkType.Warp, "orchid");
}


<div class="informations">
    <h1>@(Model.Map.Floor)F Data</h1>
    <ul>
        @foreach (var group in Model.PlaceMarks.Where(x => x.Floor == Model.Map.Floor).OrderBy(x => x.Type).GroupBy(x => x.Type))
        {
            <li>
                <h2>@group.First().Type</h2>
                <table>
                    <tr><td>total count</td><td>@group.Count()</td></tr>
                    <tr><td>last update</td><td></td></tr>
                </table>
            </li>
        }
    </ul>
    <input type="button" value="縮小" onClick="zoomOut()" />
    <input type="button" value="拡大" onClick="zoomIn()" />
</div>

<div class="controls">
    <a id="register">Register</a>
    <div class="slide_box toggle-box" id="register">
        <ol>
            <li>登録するオブジェクトの種類を選択してください。
                <ul class="list-inline">
                    @foreach (var dict in typeColor)
                    {
                        <li>
                            <svg width="40" height="40">
                                <circle cx="20" cy="20" r="20" fill="@dict.Value"></circle>
                            </svg>
                            <p style="text-align:center">@dict.Key</p>
                        </li>
                    }
                </ul>
            </li>
            <li>オブジェクトを配置したい場所をクリックしてください。</li>
            <li>
                情報を確認して登録してください。
                <div>フォーム</div>
            </li>
        </ol>
    </div>

    <a id="update">Update</a>
    <div class="slide_box toggle-box" id="update">
        <ol>
            <li>更新するオブジェクトをマップ上から選択してください。</li>
            <li>
                情報を設定して更新してください。
                <div>フォーム</div>
            </li>
        </ol>
    </div>

    <a id="connect">Connect</a>
    <div class="slide_box toggle-box" id="connect">
        <ol>
            <li>接続したいオブジェクト同士をそれぞれクリックしてください。</li>
            <li>
                全ての接続を終了して登録してください。
                <input type="button" value="登録" onClick="confirmConnect()" />
            </li>
        </ol>
    </div>

    <a id="delete">Delete</a>
    <div class="slide_box toggle-box" id="delete">
        <ol>
            <li>削除するオブジェクトをマップ上から選択してください。</li>
        </ol>
    </div>
</div>

<div class="map">
    <div id="canvas">
        <img src="~/Resources/Map/@Model.Map.MapImageFilePath" style="position:absolute;">
        <div id="svg_layer" style="position:absolute;">
            <svg width="@Model.Map.Width" height="@Model.Map.Height">
                @foreach (var item in Model.PlaceMarks)
                {
                    <circle cx="@Html.DisplayFor(modelItem => item.X)"
                            cy="@Html.DisplayFor(modelItem => item.Y)"
                            r="20"
                            fill="@typeColor[item.Type]"
                            id="@Html.DisplayFor(modelItem => item.Id)"
                            lightId="@Html.DisplayFor(modelItem => item.LightId)"
                            floor="@Html.DisplayFor(modelItem => item.Floor)"
                            type="@Html.DisplayFor(modelItem => item.Type)"
                            name="@Html.DisplayFor(modelItem => item.Name)" />
                }
                @foreach (var item in Model.Paths)
                {
                    <path d="@Html.DisplayFor(modelItem => item.D)"
                          id1="@Html.DisplayFor(modelItem => item.Edge.PlaceMarkId1)"
                          id2="@Html.DisplayFor(modelItem => item.Edge.PlaceMarkId2)"
                          cost="@Html.DisplayFor(modelItem => item.Edge.Cost)"
                          stroke-dasharray="@Html.DisplayFor(modelItem => item.StrokeDash)"
                          stroke="gray" stroke-width="5" stroke-dashoffset="0" />
                }
            </svg>
        </div>
    </div>
</div>

<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
